#!/usr/bin/env bash
#
#
# cfetch - A minimal system information tool for Linux-based operating systems.
#
# Copyright (c) 2021 Clint <https://github.com/kluntze>
# This programme is provided under the GPL-3.0 License.
# See LICENSE for more details.






# This will display cfetch's usage information.
usage() {
printf "Usage: cfetch --option

cfetch is a simple system information tool for Linux. cfetch shows the OS'
name and architecture, kernel release name, computer's modelname and version,
CPU's core and name, number of packages installed, shell's name, total RAM size
and total RAM used, and the sytem's uptime.

CONFIGURATION:
    sudo make install       To install cfetch
    cfetch                  To run cfetch
    sudo make uninstall     To uninstall cfetch

OPTIONS:
    --help                  Display help information.
    --version               Display cfetch version.

SUPPORTED DISTROS:
    Alpine Linux    ArchBang    ArchLabs    Arch Linux      ArchoLinux
    Artix Linux     CentOS      Debian      Devuan          elementaryOS
    Fedora          Gentoo      gNewSense   GNU Guix        Hyperbola
    instantOS       KISS Linux  Linux Lite  Linux Mint      LMDE
    Mageia          Manjaro     MX Linux    NixOS           openSUSE
    OpenWrt         Parabola    Pop!_OS     PureOS          Raspbian
    Slackware       Ubuntu      Void Linux  Voyager Live


For bugs report, go to https://github.com/kluntze/cfetch/issues

Copyright (c) 2020 - 2021 Clint <https://github.com/kluntze>
This programme is provided under the GPL-3.0 License. See LICENSE for more details.
"
}


# Get the username and hostname using the 'whoami'and 'hostname' command.
get_user() {
    user="$(whoami)@$(hostname)"
}


# Get the distro name (currently, this only supports the distros that follows
# LSB) and architecture using the 'lsb_release -ds' and 'uname -m'.
get_os() {
    if [ $(command  -v lsb_release) ]; then
        distro="$(lsb_release -ds)"
    else
        distro="$(grep -i 'PRETTY_NAME=' /etc/*-release | cut -d '\"' -f2)"
    fi
}


# Get the kernel release information using the 'uname -r' command. This will
# get the kernel that the  distro is using.
get_kernel() {
    kernel="$(uname -mr)"
}


# Get the system's model name and product version by reading the
# '/sys/devices/virtual/dmi/id/product_name' and
# '/sys/devices/virtual/dmi/id/product_version'.
get_model() {
    model="$(< /sys/devices/virtual/dmi/id/product_name) "
    model+="$(< /sys/devices/virtual/dmi/id/product_version)"
}


# Get the CPU's model name by using search the '/proc/cpuinfo' for 'model name'
# and the number of cores in the CPU by using the 'nproc' commands.
get_cpu() {
    cpu="$(grep -i 'model name' /proc/cpuinfo | head -1 | cut -f3- -d' ')"
    core="$(nproc)"
    cpu+=" @ ${core}"
}


# Get the nme of the shell that is currently in use.
# This supports bash, fish, ksh, tcsh, and zsh shells.
get_shell() {
    shell="$(basename $SHELL)"
}


# Get the available RAM and the total RAM by looking at the /proc/meminfo'.
# Subtract the 'ramtotal' and 'ramused' to get the size of RAM in use.
# By default this will display the RAM information in kilobytes, so 'ramused'
# and 'ramtotal' to 1024 to translate it into mebibytes.
get_ram() {
    ramused="$(grep -i MemAvailable /proc/meminfo | awk '{print $2}')"
    ramtotal="$(grep -i MemTotal /proc/meminfo | awk '{print $2}')"

    # Subtract 'ramtotal' to 'ramused' to get the value of RAM that is used.
    ramused=$((ramtotal-ramused))

    # Divide 'ramused' and 'ramtotal' to 1024 to translate it into
    # mebibytes (MiB).
    ((ramused /= 1024))
    ((ramtotal /= 1024))

    ram="${ramused} MiB / ${ramtotal} MiB"
}


# Get the number of packages installed in the user's system. This will look for
# the distro's package manager, if the package manager is found, then the number
# of packages installed in the system will be displayed. To print the number of
# packages installed, 'wc -l'.
get_pkgs() {
    # Detect apk packages installed.
    if [ -x "$(command -v apk)" ]; then
        pkgs="$(apk list --installed | wc -l)"
        pkgs+="(apk) "
    fi
    # Detect apt packages installed.
    if [ -x "$(command -v apt)" ]; then
        pkgs="$(dpkg-query -f '${binary:Package}\n' -W | wc -l)"
        pkgs+="(apt) "
    fi
    # Detect dnf packages installed.
    if [ -x "$(command -v dnf)" ]; then
        pkgs="$(dnf list installed | wc -l)"
        pkgs+="(dnf) "
    fi
    # Detect emerge packages installed.
    if [ -x "$(command -v emerge)" ]; then
        pkgs="$(qlist -I | wc -l)"
        pkgs+="(emerge) "
    fi
    # Detect kiss packages installed.
    if [ -x "$(command -v kiss)" ]; then
        pkgs="$(kiss list | wc -l)"
        pkgs+="(kiss) "
    fi
    # Detect snap packages installed.
    if [ -x "$(command -v nix)" ]; then
        pkgs="$(nix-store -q --requisites /run/current-system/sw | wc -l)"
        pkgs+="(nix) "
    fi
    # Detect opkg packages installed.
    if [ -x "$(command -v opkg)" ]; then
        pkgs="$(opkg list-installed  | wc -l)"
        pkgs+="(opkg) "
    fi
    # Detect pacman packages installed.
    if [ -x "$(command -v pacman)" ]; then
        pkgs="$(pacman -Q | wc -l)"
        pkgs+="(pacman) "
    fi
    # Detect rpm packages installed.
    if [ -x "$(command -v rpm)" ]; then
        pkgs="$(rpm -qa --last | wc -l)"
        pkgs+="(rpm) "
    fi
    # Detect xbps packages installed.
    if [ -x "$(command -v xbps)" ]; then
        pkgs="$(xbps-query -l | wc -l)"
        pkgs+="(xbps) "
    fi
    # Detect yay packages installed.
    if [ -x "$(command -v yay)" ]; then
        pkgs="$(yay -Q | wc -l)"
        pkgs+="(yay) "
    fi
    # Detect yum packages installed.
    if [ -x "$(command -v yum)" ]; then
        pkgs="$(yum list installed | wc -l)"
        pkgs+="(yum) "
    fi
    # Detect zypper packages installed.
    if [ -x "$(command -v zypper)" ]; then
        pkgs="$(zypper se | wc -l)"
        pkgs+="(zypper) "
    fi
    # Detect flatpak packages installed.
    if [ -x "$(command -v flatpak)" ]; then
        pkgs+="$(flatpak list | wc -l)"
        pkgs+="(flatpak) "
    fi
    # Detect snap packages installed.
    if [ -x "$(command -v snap)" ]; then
        pkgs+="$(snap list | wc -l)"
        pkgs+="(snap) "
    fi
}


# Get the system's uptime.
# Retrieve data in seconds then convert that data
# into days, hours, and minutes using simple math.
get_uptime() {
    IFS=. read -r sec _ < /proc/uptime

    # Convert uptime from seconds into days, hours, and minutes.
    day=$((sec / 60 / 60 / 24))
    hour=$((sec / 60 / 60 % 24))
    min=$((sec / 60 % 60))

    # Exclude days, hours, and min if they're equal to zero.
    # Print 'dys', 'hrs', and 'mins' if they're more than two.
    if [ "${day}" == 0 ]; then uptime="${hour}h ${min}m"
    elif [ "${hour}" == 0 ]; then uptime="${day}d ${min}m"
    elif [ "${min}" == 0 ]; then uptime="${day}d ${hour}h"
    else uptime="${day}d ${hour}h ${min}m"
    fi
}


# Palette colours.
# Using for loop, this will get terminal colour palette in use. Every loop
# '${colours}' will be incremented by 1 -- retrieving the terminal's seven
# colour palette.
get_colours() {
    printf '  '
    for colours in 0 1 2 3 4 5 6 7; do
        printf "\033[3${colours}m██"
    done
    printf '\n'
}


# Call all the functions.
{
    get_user
    get_os
    get_kernel
    get_model
    get_cpu
    get_shell
    get_pkgs
    get_ram
    get_uptime
}


# Define colours and text format.
{
    r='\033[0m'     # reset
    b='\033[1m'     # bold
    y='\033[33m'    # yellow

    by="${b}${y}"   # bold and yellow
    bw="${b}${w}"   # bold and white
}


# Print system information. This will print the OS' name and architecture,
# kernel release name, computer's modelname and version, CPU's core and name,
# number of packages installed, shell's name, total RAM size and total RAM used,
# and the sytem's uptime.
fetch() {
case "$distro" in
    "Alpine"*) # Alpine
        echo -e "${by}                     $user${r}"
        echo -e "${by}        /\\           OS     ${r}$distro"
        echo -e "${by}       /  \\          KERNEL ${r}$kernel"
        echo -e "${by}      / /\\ \\  /\\     MODEL  ${r}$model"
        echo -e "${by}     / /  \\ \\/  \\    CPU    ${r}$cpu"
        echo -e "${by}    / /    \\ \\/\\ \\   RAM    ${r}$ram"
        echo -e "${by}   / / /|   \\ \\ \\ \\  SHELL  ${r}$shell"
        echo -e "${by}  /_/ /_|    \\_\\ \\_\\ PKGS   ${r}$pkgs"
        echo -e "${by}                     UPTIME ${r}$uptime"
        get_colours
    ;;
    "ArchBang"*) # ArchBang
        echo -e "${by}                   $user${r}"
        echo -e "${by}        /\\         OS     ${r}$distro"
        echo -e "${by}       / _\\        KERNEL ${r}$kernel"
        echo -e "${by}      /  \\ /       MODEL  ${r}$model"
        echo -e "${by}     /   // \\      CPU    ${r}$cpu"
        echo -e "${by}    /   //   \\     RAM    ${r}$ram"
        echo -e "${by}   / ___()___ \\    SHELL  ${r}$shell"
        echo -e "${by}  /.\\\`        \\\`.\\ PKGS   ${r}$pkgs"
        echo -e "${by}                   UPTIME ${r}$uptime"
        get_colours
    ;;
    "ArchLabs"*) # ArchLabs
        echo -e "${by}                 $user${r}"
        echo -e "${by}        /\\       OS     ${r}$distro"
        echo -e "${by}       /  \\      KERNEL ${r}$kernel"
        echo -e "${by}      / /\\ \\     MODEL  ${r}$model"
        echo -e "${by}     / //\\\\  \\    CPU    ${r}$cpu"
        echo -e "${by}    / //  \\\\  \\   RAM    ${r}$ram"
        echo -e "${by}   / _\\\\  //_  \\  SHELL  ${r}$shell"
        echo -e "${by}  /.\\    /   /.\\ PKGS   ${r}$pkgs"
        echo -e "${by}                 UPTIME ${r}$uptime"
        get_colours
    ;;
    "Arch"*) # Arch
        echo -e "${by}                 $user${r}"
        echo -e "${by}        /\\       OS${r} $distro"
        echo -e "${by}       /  \\      KERNEL${r} $kernel"
        echo -e "${by}      /\\   \\     MODEL  ${r}$model"
        echo -e "${by}     /  __  \\    CPU    ${r}$cpu"
        echo -e "${by}    /  (  )  \\   RAM    ${r}$ram"
        echo -e "${by}   / __|  |__ \\  SHELL  ${r}$shell"
        echo -e "${by}  /.\\\`      \\\`.\\ PKGS   ${r}$pkgs"
        echo -e "${by}                 UPTIME ${r}$uptime"
        get_colours
    ;;
    "Arco"*) # Arco
        echo -e "${by}                 $user${r}"
        echo -e "${by}        /\\       OS     ${r}$distro"
        echo -e "${by}       /  \\      KERNEL ${r}$kernel"
        echo -e "${by}      / /\\ \\     MODEL  ${r}$model"
        echo -e "${by}     / /  \\ \\    CPU    ${r}$cpu"
        echo -e "${by}    / /    \\ \\   RAM    ${r}$ram"
        echo -e "${by}   / / -----\\ \\  SHELL  ${r}$shell"
        echo -e "${by}  /_/  \`\`\`\`-.\\_\\ PKGS   ${r}$pkgs"
        echo -e "${by}                 UPTIME ${r}$uptime"
        get_colours
    ;;
    "Artix"*) # Artix
        echo -e "${by}                   $user${r}"
        echo -e "${by}        /\\         OS     ${r}$distro"
        echo -e "${by}       /  \\        KERNEL ${r}$kernel"
        echo -e "${by}      /\\\`'.,\\      MODEL  ${r}$model"
        echo -e "${by}     /     ',      CPU    ${r}$cpu"
        echo -e "${by}    /      ,\\\`\\    RAM    ${r}$ram"
        echo -e "${by}   /   ,.'\\\`.  \\   SHELL  ${r}$shell"
        echo -e "${by}  /.,'\\\`     \\\`'.\\ PKGS   ${r}$pkgs"
        echo -e "${by}                   UPTIME ${r}$uptime"
        get_colours
    ;;
    "Cent"*) # Cent
        echo -e "${by}              $user${r}"
        echo -e "${by}   ____^____  OS     ${r}$distro"
        echo -e "${by}   |\\  |  /|  KERNEL ${r}$kernel"
        echo -e "${by}   | \\ | / |  MODEL  ${r}$model"
        echo -e "${by}  <---- ----> CPU    ${r}$cpu"
        echo -e "${by}   | / | \\ |  RAM    ${r}$ram"
        echo -e "${by}   |/__|__\\|  SHELL  ${r}$shell"
        echo -e "${by}       v      PKGS   ${r}$pkgs"
        echo -e "${by}              UPTIME ${r}$uptime"
        get_colours
    ;;
    "Debian"*) # Debian
        echo -e "${by}               $user${r}"
        echo -e "${by}     ,---._    OS     ${r}$distro"
        echo -e "${by}   /\\\`  __ \\\\   KERNEL ${r}$kernel"
        echo -e "${by}  |   /    |   MODEL  ${r}$model"
        echo -e "${by}  |   \\\`.__.\\\` CPU    ${r}$cpu"
        echo -e "${by}   \\           RAM    ${r}$ram"
        echo -e "${by}    \\\`-,_      SHELL  ${r}$shell"
        echo -e "${by}               PKGS   ${r}$pkgs"
        echo -e "${by}               UPTIME ${r}$uptime"
        get_colours
    ;;
    "Devuan"*) # Devuan
        echo -e "${by}                  $user${r}"
        echo -e "${by}  -.,             OS     ${r}$distro"
        echo -e "${by}     \\\`'-.,       KERNEL ${r}$kernel"
        echo -e "${by}          \\\`':.   MODEL  ${r}$model"
        echo -e "${by}             ::   CPU    ${r}$cpu"
        echo -e "${by}        __--\\\`:\\\` RAM    ${r}$ram"
        echo -e "${by}   _,--\\\` _.-\\\`   SHELL  ${r}$shell"
        echo -e "${by}  :_,--\\\`\\\`       PKGS   ${r}$pkgs"
        echo -e "${by}                  UPTIME ${r}$uptime"
        get_colours
    ;;
    "elementary"*) # elementary
        echo -e "${by}              $user${r}"
        echo -e "${by}    _______   OS     ${r}$distro"
        echo -e "${by}   /  ___  \\  KERNEL ${r}$kernel"
        echo -e "${by}  /  |  /  /\\ MODEL  ${r}$model"
        echo -e "${by}  |__\\ /  / | CPU    ${r}$cpu"
        echo -e "${by}  \\   /__/  / RAM    ${r}$ram"
        echo -e "${by}   \\_______/  SHELL  ${r}$shell"
        echo -e "${by}              PKGS   ${r}$pkgs"
        echo -e "${by}              UPTIME ${r}$uptime"
        get_colours
    ;;
    "Fedora"*) # Fedora
        echo -e "${by}                  $user${r}"
        echo -e "${by}        _____     OS     ${r}$distro"
        echo -e "${by}       /   __)\\   KERNEL ${r}$kernel"
        echo -e "${by}       |  /  \\ \\  MODEL  ${r}$model"
        echo -e "${by}    ___|  |__/ /  CPU    ${r}$cpu"
        echo -e "${by}   / (_    _)_/   RAM    ${r}$ram"
        echo -e "${by}  / /  |  |       SHELL  ${r}$shell"
        echo -e "${by}  \\ \\__/  |       PKGS   ${r}$pkgs"
        echo -e "${by}   \\(_____/       UPTIME ${r}$uptime"
        get_colours
    ;;
    "Gentoo"*) # Gentoo
        echo -e "${by}                 $user${r}"
        echo -e "${by}    .-----.      OS     ${r}$distro"
        echo -e "${by}  .\\\`    _  \\\`.  KERNEL ${r}$kernel"
        echo -e "${by}  \\\`.   ()   \\\`. MODEL  ${r}$model"
        echo -e "${by}    \\\`.        / CPU    ${r}$cpu"
        echo -e "${by}   .\\\`       .\\\` RAM    ${r}$ram"
        echo -e "${by}  /       .\\\`    SHELL  ${r}$shell"
        echo -e "${by}  \\____.-\\\`      PKGS   ${r}$pkgs"
        echo -e "${by}                 UPTIME ${r}$uptime"
        get_colours
    ;;
    "gNewSense"*) # gNewSense
        echo -e "${by}                     $user${r}"
        echo -e "${by}     ________        OS     ${r}$distro"
        echo -e "${by}   .\\\`__.---.__\\\`.   KERNEL ${r}$kernel"
        echo -e "${by}  / /  |  *|  \\ \\    MODEL  ${r}$model"
        echo -e "${by}  | |  \\___/  | |    CPU    ${r}$cpu"
        echo -e "${by}  \\ \\         / /    RAM    ${r}$ram"
        echo -e "${by}   \\\`.\\\`       \\\`.\\\` SHELL  ${r}$shell"
        echo -e "${by}                     PKGS   ${r}$pkgs"
        echo -e "${by}                     UPTIME ${r}$uptime"
        get_colours
    ;;
    "Guix"*) # Guix
        echo -e "${by}                     $user${r}"
        echo -e "${by}  |.__          __.| OS     ${r}$distro"
        echo -e "${by}  |__ \\        / __| KERNEL ${r}$kernel"
        echo -e "${by}     \\ \\      / /    MODEL  ${r}$model"
        echo -e "${by}      \\ \\    / /     CPU    ${r}$cpu"
        echo -e "${by}       \\ \\  / /      RAM    ${r}$ram"
        echo -e "${by}        \\ \\/ /       SHELL  ${r}$shell"
        echo -e "${by}         \\__/        PKGS   ${r}$pkgs"
        echo -e "${by}                     UPTIME ${r}$uptime"
        get_colours
    ;;
    "Hyperbola"*) # Hyperbola
        echo -e "${by}                 $user${r}"
        echo -e "${by}      |\\\`__.\\\`/  OS     ${r}$distro"
        echo -e "${by}      \\____/     KERNEL ${r}$kernel"
        echo -e "${by}      .--.       MODEL  ${r}$model"
        echo -e "${by}     /    \\      CPU    ${r}$cpu"
        echo -e "${by}    /  ___ \\     RAM    ${r}$ram"
        echo -e "${by}   / .\\\`   \\\`.\\  SHELL  ${r}$shell"
        echo -e "${by}  /.\\\`      \\\`.\\ PKGS   ${r}$pkgs"
        echo -e "${by}                 UPTIME ${r}$uptime"
        get_colours
    ;;
    "instant"*) # instant
        echo -e "${by}                $user${r}"
        echo -e "${by}   ,-''-,       OS     ${r}$distro"
        echo -e "${by}  : .''. :      KERNEL ${r}$kernel"
        echo -e "${by}  : ',,' :      MODEL  ${r}$model"
        echo -e "${by}   '-____:__    CPU    ${r}$cpu"
        echo -e "${by}         :  \\\`. RAM    ${r}$ram"
        echo -e "${by}         \\\`._.' SHELL  ${r}$shell"
        echo -e "${by}                PKGS   ${r}$pkgs"
        echo -e "${by}                UPTIME ${r}$uptime"
        get_colours
    ;;
    "Lite"*) # Lite
        echo -e "${by}         $user${r}"
        echo -e "${by}     /\\  OS     ${r}$distro"
        echo -e "${by}    /  \\ KERNEL ${r}$kernel"
        echo -e "${by}   / / / MODEL  ${r}$model"
        echo -e "${by}  > / /  CPU    ${r}$cpu"
        echo -e "${by}  \\ \\ \\  RAM    ${r}$ram"
        echo -e "${by}   \\_\\_\\ SHELL  ${r}$shell"
        echo -e "${by}      \\  PKGS   ${r}$pkgs"
        echo -e "${by}         UPTIME ${r}$uptime"
        get_colours
    ;;
    "Mint"* | "LMDE"*) # Mint & LMDE
        echo -e "${by}                  $user${r}"
        echo -e "${by}   _____________  OS     ${r}$distro"
        echo -e "${by}  |_            \\ KERNEL ${r}$kernel"
        echo -e "${by}    |  |  ___   | MODEL  ${r}$model"
        echo -e "${by}    |  | | | |  | CPU    ${r}$cpu"
        echo -e "${by}    |  | | | |  | RAM    ${r}$ram"
        echo -e "${by}    |   \\____/  | SHELL  ${r}$shell"
        echo -e "${by}    \\__________/  PKGS   ${r}$pkgs"
        echo -e "${by}                  UPTIME ${r}$uptime"
        get_colours
    ;;
    "Mageia"*) # Mageia
        echo -e "${by}           $user${r}"
        echo -e "${by}     *     OS     ${r}$distro"
        echo -e "${by}      *    KERNEL ${r}$kernel"
        echo -e "${by}     **    MODEL  ${r}$model"
        echo -e "${by}   /\\__/\\  CPU    ${r}$cpu"
        echo -e "${by}  /      \\ RAM    ${r}$ram"
        echo -e "${by}  \\      / SHELL  ${r}$shell"
        echo -e "${by}   \\____/  PKGS   ${r}$pkgs"
        echo -e "${by}           UPTIME ${r}$uptime"
        get_colours
    ;;
    "Manjaro"*) # Manjaro
        echo -e "${by}                 $user${r}"
        echo -e "${by}  ||||||||| |||| OS     ${r}$distro"
        echo -e "${by}  ||||||||| |||| KERNEL ${r}$kernel"
        echo -e "${by}  ||||      |||| MODEL  ${r}$model"
        echo -e "${by}  |||| |||| |||| CPU    ${r}$cpu"
        echo -e "${by}  |||| |||| |||| RAM    ${r}$ram"
        echo -e "${by}  |||| |||| |||| SHELL  ${r}$shell"
        echo -e "${by}  |||| |||| |||| PKGS   ${r}$pkgs"
        echo -e "${by}                 UPTIME ${r}$uptime"
        get_colours
    ;;
    "MX"*) # MX
        echo -e "${by}               $user${r}"
        echo -e "${by}      \\\\  /     OS     ${r}$distro"
        echo -e "${by}       \\\\/      KERNEL ${r}$kernel"
        echo -e "${by}        \\\\      MODEL  ${r}$model"
        echo -e "${by}     /\\/ \\\\     CPU    ${r}$cpu"
        echo -e "${by}    /  \\  /\\   RAM    ${r}$ram"
        echo -e "${by}   /    \\/  \\  SHELL  ${r}$shell"
        echo -e "${by}  /__________\\ PKGS   ${r}$pkgs"
        echo -e "${by}               UPTIME ${r}$uptime"
        get_colours
    ;;
    "Nix"*) # Nix
        echo -e "${by}                 $user${r}"
        echo -e "${by}    \\   \\ //     OS     ${r}$distro"
        echo -e "${by}   ==\\___\\/ //   KERNEL ${r}$kernel"
        echo -e "${by}     //    \\//   MODEL  ${r}$model"
        echo -e "${by}  ==//      //== CPU    ${r}$cpu"
        echo -e "${by}   //\\____//     RAM    ${r}$ram"
        echo -e "${by}  // /\\   \\==    SHELL  ${r}$shell"
        echo -e "${by}    // \\   \\     PKGS   ${r}$pkgs"
        echo -e "${by}                 UPTIME ${r}$uptime"
        get_colours
    ;;
    "Wrt"*) # OpenWrt
        echo -e "${by}               OS     ${r}$distro"
        echo -e "${by}    _______    KERNEL ${r}$kernel"
        echo -e "${by} .-- _____ --. MODEL  ${r}$model"
        echo -e "${by}  .-- ___ --.  CPU    ${r}$cpu"
        echo -e "${by}   .-- _ --.   RAM    ${r}$ram"
        echo -e "${by}    .-- --.    SHELL  ${r}$shell"
        echo -e "${by}       0       PKGS   ${r}$pkgs"
        echo -e "${by}               UPTIME ${r}$uptime"
        get_colours
    ;;
    "Parabola"*) # Parabola
        echo -e "${by}                    $user${r}"
        echo -e "${by}    __ __ __  _     OS     ${r}$distro"
        echo -e "${by}  .\\\`_//_//_/ / \\\`. KERNEL ${r}$kernel"
        echo -e "${by}            /  .\\\`  MODEL  ${r}$model"
        echo -e "${by}           / .\\\`    CPU    ${r}$cpu"
        echo -e "${by}          /.\\\`      RAM    ${r}$ram"
        echo -e "${by}         /\\\`        SHELL  ${r}$shell"
        echo -e "${by}                    PKGS   ${r}$pkgs"
        echo -e "${by}                    UPTIME ${r}$uptime"
        get_colours
    ;;
    "Pop"*) # Pop
        echo -e "${by}                    $user${r}"
        echo -e "${by}  ______            OS     ${r}$distro"
        echo -e "${by}  \\   _ \\        __ KERNEL ${r}$kernel"
        echo -e "${by}   \\ \\ \\ \\      / / MODEL  ${r}$model"
        echo -e "${by}    \\ \\_\\ \\    / /  CPU    ${r}$cpu"
        echo -e "${by}     \\  ___\\  /_/   RAM    ${r}$ram"
        echo -e "${by}      \\ \\    _      SHELL  ${r}$shell"
        echo -e "${by}     __\\_\\__(_)_    PKGS   ${r}$pkgs"
        echo -e "${by}    (___________)   UPTIME ${r}$uptime"
        get_colours
    ;;
    "Pure"*) # Pure
        echo -e "${by}                  $user${r}"
        echo -e "${by}   _____________  OS     ${r}$distro"
        echo -e "${by}  |  _________  | KERNEL ${r}$kernel"
        echo -e "${by}  | |         | | MODEL  ${r}$model"
        echo -e "${by}  | |         | | CPU    ${r}$cpu"
        echo -e "${by}  | |_________| | RAM    ${r}$ram"
        echo -e "${by}  |_____________| SHELL  ${r}$shell"
        echo -e "${by}                  PKGS   ${r}$pkgs"
        echo -e "${by}                  UPTIME ${r}$uptime"
        get_colours
    ;;
    "Raspbian"*) # Raspbian
        echo -e "${by}             $user${r}"
        echo -e "${by}    __  __   OS     ${r}$distro"
        echo -e "${by}   (_\\)(/_)  KERNEL ${r}$kernel"
        echo -e "${by}   (_(__)_)  MODEL  ${r}$model"
        echo -e "${by}  (_(_)(_)_) CPU    ${r}$cpu"
        echo -e "${by}   (_(__)_)  RAM    ${r}$ram"
        echo -e "${by}     (__)    SHELL  ${r}$shell"
        echo -e "${by}             PKGS   ${r}$pkgs"
        echo -e "${by}             UPTIME ${r}$uptime"
        get_colours
    ;;
    "Slackware"*) # Slackware
        echo -e "${by}                $user${r}"
        echo -e "${by}     ________   OS     ${r}$distro"
        echo -e "${by}    /  ______|  KERNEL ${r}$kernel"
        echo -e "${by}    | |______   MODEL  ${r}$model"
        echo -e "${by}    \\______  \\  CPU    ${r}$cpu"
        echo -e "${by}     ______| |  RAM    ${r}$ram"
        echo -e "${by}  | |________/  SHELL  ${r}$shell"
        echo -e "${by}  |____________ PKGS   ${r}$pkgs"
        echo -e "${by}                UPTIME ${r}$uptime"
        get_colours
    ;;
    "SUSE"*) # SUSE
        echo -e "${by}                $user${r}"
        echo -e "${by}      _______   OS     ${r}$distro"
        echo -e "${by}  -___|   __ \\  KERNEL ${r}$kernel"
        echo -e "${by}         / .\\ \\ MODEL  ${r}$model"
        echo -e "${by}         \\__/ | CPU    ${r}$cpu"
        echo -e "${by}       _______| RAM    ${r}$ram"
        echo -e "${by}       \\_______ SHELL  ${r}$shell"
        echo -e "${by}  --__________/ PKGS   ${r}$pkgs"
        echo -e "${by}                UPTIME ${r}$uptime"
        get_colours
    ;;
    "Ubuntu"*) # Ubuntu
        echo -e "${by}              $user${r}"
        echo -e "${by}           _  OS     ${r}$distro"
        echo -e "${by}       ---(_) KERNEL ${r}$kernel"
        echo -e "${by}   _/  ---  \\ MODEL  ${r}$model"
        echo -e "${by}  (_) |   |   CPU    ${r}$cpu"
        echo -e "${by}    \\  --- _/ RAM    ${r}$ram"
        echo -e "${by}       ---(_) SHELL  ${r}$shell"
        echo -e "${by}              PKGS   ${r}$pkgs"
        echo -e "${by}              UPTIME ${r}$uptime"
        get_colours
    ;;
    "Void"*) # Void
        echo -e "${by}                  $user${r}"
        echo -e "${by}      _______     OS     ${r}$distro"
        echo -e "${by}      \\_____ \\\`-  KERNEL ${r}$kernel"
        echo -e "${by}   /\\   ___ \\\`- \\ MODEL  ${r}$model"
        echo -e "${by}  | |  /   \\  | | CPU    ${r}$cpu"
        echo -e "${by}  | |  \\___/  | | RAM    ${r}$ram"
        echo -e "${by}   \\ \\\`-_____  \\/ SHELL  ${r}$shell"
        echo -e "${by}    \\\`-______\\    PKGS   ${r}$pkgs"
        echo -e "${by}                  UPTIME ${r}$uptime"
        get_colours
    ;;
    "Voyager"*) # Voyager
        echo -e "${by}                 $user${r}"
        echo -e "${by}   _____   ____  OS     ${r}$distro"
        echo -e "${by}  |     | |    | KERNEL ${r}$kernel"
        echo -e "${by}  |     | |    | MODEL  ${r}$model"
        echo -e "${by}  |     | |    | CPU    ${r}$cpu"
        echo -e "${by}  |     | |____| RAM    ${r}$ram"
        echo -e "${by}  |     | _____  SHELL  ${r}$shell"
        echo -e "${by}  |     ||     | PKGS   ${r}$pkgs"
        echo -e "${by}  |_____||_____| UPTIME ${r}$uptime"
        get_colours
    ;;
    *) # Others
        echo -e "${by}             $user${r}"
        echo -e "${by}      ___    OS     ${r}$distro"
        echo -e "${by}     (.. |   KERNEL ${r}$kernel"
        echo -e "${by}     (<> |   MODEL  ${r}$model"
        echo -e "${by}    / __  \\  CPU    ${r}$cpu"
        echo -e "${by}   ( /  \\ /| RAM    ${r}$ram"
        echo -e "${by}  _/\\ __)/_) SHELL  ${r}$shell"
        echo -e "${by}  \\|/-___\\|/ PKGS   ${r}$pkgs"
        echo -e "${by}             UPTIME ${r}$uptime"
        get_colours
    ;;
esac
}


main() {
    # If there are arguments, the assigned cases will be executed.
    # If the argument does not match on the cases, then system information
    # will be displayed.
    while [[ $# -gt 0 ]] && [[ "$1" == "--"* ]];
    do
        option="$1";
        shift;
        case "$option" in
            "--version") printf "cfetch 0.1.2\n";;
            "--help") usage;;
            *) fetch;;
        esac
    done

    # If there are no arguments, then the system information will be displayed.
    if [[ "$option" != "--"* ]]; then
        fetch
    fi
}

main "$@"
